{"version":3,"sources":["App.js","Button.js","serviceWorker.js","index.js"],"names":["App","state","count","keys","value","styleName","handleButton","setState","prevState","eval","join","className","placeholder","this","map","key","data","React","Component","Button","props","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"o4CAMMA,I,irBACJC,MAAQ,CACNC,MAAO,GACPC,KAAM,CACJ,CAAEC,MAAO,QAASC,UAAW,eAC7B,CAAED,MAAO,IAAKC,UAAW,kBACzB,CAAED,MAAO,IAAKC,UAAW,gBACzB,CAAED,MAAO,IAAKC,UAAW,gBACzB,CAAED,MAAO,IAAKC,UAAW,gBACzB,CAAED,MAAO,IAAKC,UAAW,kBACzB,CAAED,MAAO,IAAKC,UAAW,gBACzB,CAAED,MAAO,IAAKC,UAAW,gBACzB,CAAED,MAAO,IAAKC,UAAW,gBACzB,CAAED,MAAO,IAAKC,UAAW,kBACzB,CAAED,MAAO,IAAKC,UAAW,gBACzB,CAAED,MAAO,IAAKC,UAAW,gBACzB,CAAED,MAAO,IAAKC,UAAW,gBACzB,CAAED,MAAO,IAAKC,UAAW,kBACzB,CAAED,MAAO,IAAKC,UAAW,qBACzB,CAAED,MAAO,IAAKC,UAAW,oB,MAI7BC,aAAe,SAACF,OACA,UAAVA,MACF,MAAKG,SAAS,CAAEL,MAAO,KACJ,MAAVE,MACT,MAAKG,UAAS,SAAAC,WAAS,MAAK,CAC1BN,MAAO,CAACO,KAAKD,UAAUN,MAAMQ,KAAK,UAGpC,MAAKH,UAAS,SAAAC,GAAS,MAAK,CAC1BN,MAAM,GAAD,+IAAMM,EAAUN,OAAhB,CAAuBE,a,wUAKxB,IAAD,OACP,OACE,sEACE,kEAAKO,UAAU,aACb,kEAAKA,UAAU,aACb,iEAAIA,UAAU,YAAYC,YAAY,KAAtC,IAA4CC,KAAKZ,MAAMC,MAAvD,MAEF,kEAAKS,UAAU,kBACb,kEAAKA,UAAU,WACZE,KAAKZ,MAAME,KAAKW,KAAI,SAAAC,GACnB,OAAO,2DAAC,uCAAD,CAAQT,aAAc,EAAKA,aAAcU,KAAMD,e,KA/CpDE,6CAAMC,WAyDTlB,2B,gCC/Df,sDAEamB,EAAS,SAACC,GACrB,OAAQ,4BAAQT,UAAS,UAAKS,EAAMJ,KAAKX,UAAhB,WAAoCgB,QAAS,kBAAMD,EAAMd,aAAac,EAAMJ,KAAKZ,SAASgB,EAAMJ,KAAKZ,S,mKCS5GkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC5B,EAAA,EAAD,MAAS6B,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.be21fa79.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\n\nimport { Button } from './Button';\n\nclass App extends React.Component {\n  state = {\n    count: [],\n    keys: [\n      { value: \"clear\", styleName: \"clearButton\" },\n      { value: \"/\", styleName: \"operatorButton\" },\n      { value: \"7\", styleName: \"numberButton\" },\n      { value: \"8\", styleName: \"numberButton\" },\n      { value: \"9\", styleName: \"numberButton\" },\n      { value: \"*\", styleName: \"operatorButton\" },\n      { value: \"4\", styleName: \"numberButton\" },\n      { value: \"5\", styleName: \"numberButton\" },\n      { value: \"6\", styleName: \"numberButton\" },\n      { value: \"-\", styleName: \"operatorButton\" },\n      { value: \"1\", styleName: \"numberButton\" },\n      { value: \"2\", styleName: \"numberButton\" },\n      { value: \"3\", styleName: \"numberButton\" },\n      { value: \"+\", styleName: \"operatorButton\" },\n      { value: \"0\", styleName: \"numberButton zero\"  },\n      { value: \"=\", styleName: \"operatorButton\" }\n    ]\n  }\n\n  handleButton = (value) => {\n    if (value === \"clear\") {\n      this.setState({ count: [] })\n    } else if (value === \"=\") {\n      this.setState(prevState => ({\n        count: [eval(prevState.count.join(\"\"))]\n      }))\n    } else {\n      this.setState(prevState => ({\n        count: [...prevState.count, value]\n      }))\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"calc-body\">\n          <div className=\"value-row\">\n            <h1 className=\"value-box\" placeholder=\"0\"> {this.state.count} </h1>\n          </div>\n          <div className=\"buttonsWrapper\">\n            <div className=\"buttons\">\n              {this.state.keys.map(key => {\n                return <Button handleButton={this.handleButton} data={key} />\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\n\nexport const Button = (props) => {\n  return (<button className={`${props.data.styleName} button`} onClick={() => props.handleButton(props.data.value)}>{props.data.value}</button>);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}